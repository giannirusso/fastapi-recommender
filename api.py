import traceback
from fastapi import FastAPI
import numpy as np
import pickle
import scipy.sparse
import os

if not os.path.exists("model.pkl") or not os.path.exists("interaction_matrix.npz"):
    raise FileNotFoundError("–§–∞–π–ª—ã –º–æ–¥–µ–ª–∏ –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç! –ü—Ä–æ–≤–µ—Ä—å –∑–∞–≥—Ä—É–∑–∫—É model.pkl –∏ interaction_matrix.npz")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º FastAPI
app = FastAPI()

# –ó–∞–≥—Ä—É–∂–∞–µ–º –æ–±—É—á–µ–Ω–Ω—É—é –º–æ–¥–µ–ª—å ALS (–¥–æ–ª–∂–µ–Ω –±—ã—Ç—å —Ñ–∞–π–ª `model.pkl` –≤ –ø—Ä–æ–µ–∫—Ç–µ)
try:
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –º–æ–¥–µ–ª–∏ ALS...")
    with open("model.pkl", "rb") as f:
        model = pickle.load(f)
    
    print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ interaction_matrix...")
    interaction_matrix = scipy.sparse.load_npz("interaction_matrix.npz")

    if model is None:
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: model –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–∞–∫ None!")
    if interaction_matrix is None:
        raise ValueError("‚ùå –û—à–∏–±–∫–∞: interaction_matrix –∑–∞–≥—Ä—É–∑–∏–ª–∞—Å—å –∫–∞–∫ None!")
        
    print("‚úÖ –ú–æ–¥–µ–ª—å –∏ –º–∞—Ç—Ä–∏—Ü–∞ –∑–∞–≥—Ä—É–∂–µ–Ω—ã —É—Å–ø–µ—à–Ω–æ!")
except Exception as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏: {e}")
    model = None
    interaction_matrix = None



# –≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
@app.get("/recommend/{visitorid}")
def get_recommendations(visitorid: int, N: int = 5):
    try:
        if model is None or interaction_matrix is None:
            return {"error": "–ú–æ–¥–µ–ª—å –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω–∞"}

        if visitorid not in range(interaction_matrix.shape[0]):
            return {"error": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω"}

        recommended_items = model.recommend(visitorid, interaction_matrix[visitorid], N=N)

        recommendations = [{"categoryid": int(item[0]), "score": float(item[1])} for item in recommended_items]

        return {"visitorid": visitorid, "recommendations": recommendations}

    except Exception as e:
        error_message = traceback.format_exc()
        return {"error": "–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞", "details": error_message}
